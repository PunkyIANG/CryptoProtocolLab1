using System;
using System.Security.Cryptography;
using System.Text;

namespace CryptoProtocolLab1
{
    class Program
    {
        const int k0Length = 64;
        const int hashLength = 32;
        const byte ipad = 0x36;
        const byte opad = 0x5c;

        static void PrintByteArr(byte[] arr)
        {
            string hex = BitConverter.ToString(arr);
            Console.WriteLine(hex);
        }

        static void Main(string[] args)
        {
            byte[] text = Encoding.ASCII.GetBytes("sample message");
            byte[] k    = Encoding.ASCII.GetBytes

            HMACSHA256 hmac = new HMACSHA256(k);

            PrintByteArr(hmac.ComputeHash(text));

            PrintByteArr(HMACStuff(text, k));
        }

        static byte[] HMACStuff(byte[] k, byte[] text)
        {
            HashAlgorithm sha = SHA256.Create();


            byte[] k0;
            if (k.Length == 8 * k0Length)
            {
                k0 = k;
            } 
            else if (k.Length > 8 * k0Length)
            {
                k0 = new byte[k0Length];
                Array.Copy(sha.ComputeHash(k), k0, hashLength);
            } 
            else
            {
                k0 = new byte[k0Length];
                Array.Copy(k, k0, k.Length);
            }

            byte[] IKeyPad = new byte[k0Length + text.Length];

            for (int i = 0; i < k0Length; i++)
                IKeyPad[i] = (byte)(k0[i] ^ ipad);

            Array.Copy(text, 0, IKeyPad, k0Length, text.Length);

            var V = sha.ComputeHash(IKeyPad);



            byte[] OKeyPad = new byte[k0Length + hashLength];

            for (int i = 0; i < k0Length; i++)
                OKeyPad[i] = (byte)(k0[i] ^ opad);

            Array.Copy(V, 0, OKeyPad, k0Length, hashLength);

            return sha.ComputeHash(OKeyPad);
        }
    }
}
